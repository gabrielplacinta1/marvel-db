{"version":3,"file":"static/js/813.0f261b5d.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleCharPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleCharPage = () => {\r\n    const {charName} = useParams();\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [charName])\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        getCharacterByName(charName)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {setContent(process, View, char)}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail} = data[0];\r\n    const finalDescription = description ? description : 'There is no any description for this character';\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>{`${name} page`}</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <div className=\"single-comic\">\r\n                <img src={thumbnail.path + '.' + thumbnail.extension} alt={name} className=\"single-comic__img\" style={{height: '293px'}}/>\r\n                <div className=\"single-comic__info\">\r\n                    <h2 className=\"single-comic__name\">{name}</h2>\r\n                    <p className=\"single-comic__descr\">{finalDescription}</p>\r\n                </div>\r\n                <Link to='/' className=\"single-comic__back\">Back</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingleCharPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=4fdec1c0d9fca917f1352e2e554da390';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getComics = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results;\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            fullDescription: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            homepage: comics.urls[0].url,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : `No information about the number of pages`,\n            language: comics.textObjects.language || 'en-us'\n        }\n    }\n\n    return {loading, error, process, setProcess, getAllCharacters, getCharacter, getCharacterByName, clearError, getAllComics, getComics}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('error');\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","View","data","name","description","thumbnail","finalDescription","content","path","extension","to","charName","useParams","useState","char","setChar","useMarvelService","getCharacterByName","clearError","process","setProcess","useEffect","updateChar","then","onCharLoaded","setContent","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComics","slice","fullDescription","homepage","urls","wiki","comics","items","title","price","prices","pageCount","language","textObjects","Component","Spinner","ErrorMessage"],"sourceRoot":""}