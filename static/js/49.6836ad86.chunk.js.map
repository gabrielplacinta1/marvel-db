{"version":3,"file":"static/js/49.6836ad86.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport setContent from '../../utils/setContent';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {getComics, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComics();\r\n    }, [comicId])\r\n\r\n    const updateComics = () => {\r\n        clearError();\r\n        getComics(comicId)\r\n            .then(onComicLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {setContent(process, View, comic)}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = data;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${title} comics book`}\r\n                    />\r\n                <title>{title}</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">{language}</p>\r\n                <div className=\"single-comic__price\">{`${price}$`}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=4fdec1c0d9fca917f1352e2e554da390';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getComics = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results;\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            fullDescription: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            homepage: comics.urls[0].url,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : `No information about the number of pages`,\n            language: comics.textObjects.language || 'en-us'\n        }\n    }\n\n    return {loading, error, process, setProcess, getAllCharacters, getCharacter, getCharacterByName, clearError, getAllComics, getComics}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('error');\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","title","description","pageCount","thumbnail","language","price","className","name","content","to","comicId","useParams","useState","comic","setComic","useMarvelService","getComics","clearError","process","setProcess","useEffect","updateComics","then","onComicLoaded","setContent","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getCharacterByName","char","slice","fullDescription","path","extension","homepage","urls","wiki","comics","items","prices","textObjects","Component","Spinner","ErrorMessage"],"sourceRoot":""}