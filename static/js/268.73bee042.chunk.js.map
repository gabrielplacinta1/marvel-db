{"version":3,"file":"static/js/268.73bee042.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/randomChar/RandomChar.js","components/searchForm/SearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n\n    }\n\n    const itemRefs = useRef([]);\n\n    const setFocusOnItem = (index) => {\n        itemRefs.current.forEach(item => {\n            item.classList.remove('char__item_selected');\n        })\n        itemRefs.current[index].classList.add('char__item_selected');\n        itemRefs.current[index].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id}\n                    ref={el => itemRefs.current[i] = el}\n                    tabIndex={0}\n                    onClick={() => {props.onCharSelected(item.id)\n                                    setFocusOnItem(i);\n                                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            setFocusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default CharList;","import { useState, useEffect, useRef } from 'react';\n\nimport './charInfo.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const prevCharIdRef = useRef();\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        if (prevCharIdRef.current !== props.charId) {\n          updateChar();\n        }\n        prevCharIdRef.current = props.charId;\n    });\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There are no comics for this character'}\n                {\n                    comics.map((item, i) => {\n                        if (i < 10) {\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        } else return null\n                    })\n                }\n            </ul>\n        </>\n    );\n}\n\nexport default CharInfo;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n   \n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './searchForm.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst SearchForm = () => {\r\n\r\n    const [character, setCharacter] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (character) => {\r\n        setCharacter(character);\r\n    }\r\n\r\n    const updateCharacter = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const results = !character ? null : character.length > 0 ?\r\n                    <div className='searchform__succes'>\r\n                        {`There is! Visit ${character[0].name} page?`}\r\n                        <Link to={`/character/${character[0].name}`}>\r\n                            <button className='button button__secondary'>\r\n                                <div className=\"inner\">TO PAGE</div>\r\n                            </button>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className='searchform__fail'>\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"searchform\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateCharacter(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className='searchform__header' htmlFor='charName'>Or find a character by name:</label>\r\n                    <div>\r\n                        <Field\r\n                            className='searchform__input'\r\n                            id='charName'\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder='Enter name'/>\r\n                        <button\r\n                            type='submit'\r\n                            className='button button__main'\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component='div' name='charName'/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport SearchForm from \"../searchForm/SearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n        \r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <SearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=4fdec1c0d9fca917f1352e2e554da390';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getComics = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results;\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            fullDescription: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            price: comics.prices[0].price,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            homepage: comics.urls[0].url,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : `No information about the number of pages`,\n            language: comics.textObjects.language || 'en-us'\n        }\n    }\n\n    return {loading, error, process, setProcess, getAllCharacters, getCharacter, getCharacterByName, clearError, getAllComics, getComics}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('error');\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","props","useState","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","useMarvelService","getAllCharacters","process","setProcess","useEffect","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","setFocusOnItem","index","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","setContent","arr","items","map","i","imgStyle","thumbnail","className","ref","el","tabIndex","onClick","onCharSelected","id","onKeyDown","e","key","name","renderItems","disabled","View","data","description","homepage","wiki","comics","href","char","setChar","prevCharIdRef","getCharacter","clearError","updateChar","charId","onCharLoaded","Math","floor","random","mjolnir","character","setCharacter","loading","error","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","selectedChar","Helmet","content","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","getAllComics","_transformComics","getComics","slice","fullDescription","path","extension","urls","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}